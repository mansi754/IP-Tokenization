{
    "hints": {
        "create_application(asset,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "tokenize_asset(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_ip_fraction(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "atomic_swap(account,account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_kyc(account,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revoke_kyc(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute_royalty(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "connect_wallet()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_application()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "assetid": {
                    "type": "uint64",
                    "key": "assetid"
                },
                "creator_account": {
                    "type": "bytes",
                    "key": "creator_account"
                },
                "royalty_percent": {
                    "type": "uint64",
                    "key": "royalty_percent"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "IPTokenizationPlatform",
        "methods": [
            {
                "name": "create_application",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "royalty_percent"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "tokenize_asset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrpay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy_ip_fraction",
                "args": [
                    {
                        "type": "pay",
                        "name": "buyer_payment"
                    },
                    {
                        "type": "uint64",
                        "name": "fraction_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "atomic_swap",
                "args": [
                    {
                        "type": "account",
                        "name": "buyer"
                    },
                    {
                        "type": "account",
                        "name": "seller"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify_kyc",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    },
                    {
                        "type": "bool",
                        "name": "is_verified"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "revoke_kyc",
                "args": [
                    {
                        "type": "account",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "distribute_royalty",
                "args": [
                    {
                        "type": "pay",
                        "name": "usage_payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "connect_wallet",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_application",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}